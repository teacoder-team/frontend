'use client'

import { useQuery } from '@tanstack/react-query'
import { BookOpen } from 'lucide-react'
import Image from 'next/image'
import Link from 'next/link'
import { useRef, useState } from 'react'
import { FaYoutube } from 'react-icons/fa'
import { FaFolder } from 'react-icons/fa6'
import { toast } from 'sonner'

import { Button } from '../ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs'

import { CourseInfo } from './course-info'
import { CourseLessons } from './course-lessons'
import { CourseOverview } from './course-overview'
import { CourseProgress } from './course-progress'
import { CourseSummary } from './course-summary'
import type { CourseResponse, LessonResponse } from '@/src/api/generated'
import { getCompletedLessons } from '@/src/api/requests'
import { ROUTES } from '@/src/constants'
import { useAuth } from '@/src/hooks'
import { getMediaSource, lessonsTranslator } from '@/src/lib/utils'

interface CourseDetailsProps {
	course: CourseResponse
	lessons: LessonResponse[]
}

export function CourseDetails({ course, lessons }: CourseDetailsProps) {
	// const [activeTab, setActiveTab] = useState('overview')
	// const lessonsRef = useRef<HTMLDivElement | null>(null)

	const { isAuthorized } = useAuth()

	const { data: completedLessons, isLoading } = useQuery({
		queryKey: ['get completed lessons'],
		queryFn: () => getCompletedLessons(course.id),
		enabled: isAuthorized
	})

	// function onStartCourse() {
	// 	setActiveTab('lessons')
	// 	if (lessonsRef.current) {
	// 		lessonsRef.current.scrollIntoView({ behavior: 'smooth' })
	// 	}
	// }

	if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>

	return (
		// <main className='mx-auto mb-20 mt-10 max-w-7xl px-4 sm:px-6 lg:px-8'>
		// 	<CourseSummary
		// 		course={course}
		// 		lessons={lessons}
		// 		setActiveTab={setActiveTab}
		// 	/>
		// 	{isAuthorized && lessons.length > 0 && (
		// 		<CourseProgress
		// 			totalLessons={lessons.length}
		// 			completedLessons={completedLessons?.length ?? 0}
		// 		/>
		// 	)}

		// 	<div className='grid gap-8 lg:grid-cols-3'>
		// 		<div className='lg:col-span-2'>
		// 			{lessons.length ? (
		// 				<Tabs
		// 					value={activeTab}
		// 					onValueChange={setActiveTab}
		// 					className='w-full'
		// 				>
		// 					<TabsList className='mb-6 grid w-full grid-cols-2'>
		// 						<TabsTrigger value='overview'>
		// 							–û–ø–∏—Å–∞–Ω–∏–µ
		// 						</TabsTrigger>
		// 						<TabsTrigger value='lessons'>–£—Ä–æ–∫–∏</TabsTrigger>
		// 					</TabsList>

		// 					<TabsContent value='overview'>
		// 						<CourseOverview course={course} />
		// 					</TabsContent>

		// 					<TabsContent value='lessons'>
		// 						<div ref={lessonsRef}>
		// 							<CourseLessons
		// 								lessons={lessons}
		// 								completedLessons={completedLessons!}
		// 							/>
		// 						</div>
		// 					</TabsContent>
		// 				</Tabs>
		// 			) : (
		// 				<CourseOverview course={course} />
		// 			)}
		// 		</div>
		// 		<div>
		// 			<CourseInfo
		// 				course={course}
		// 				lessons={lessons}
		// 				completedLessons={completedLessons!}
		// 			/>
		// 		</div>
		// 	</div>
		// </main>
		<div className='mx-auto mt-4 max-w-screen-xl pb-10'>
			<div className='grid grid-cols-1 gap-8 lg:grid-cols-6'>
				<div className='order-1 col-span-1 flex flex-col space-y-6 lg:col-span-4'>
					<div className='relative aspect-video overflow-hidden rounded-xl border bg-white'>
						<Image
							src={getMediaSource(course.thumbnail!, 'courses')}
							alt={course.title}
							fill
						/>
					</div>
					<div className='flex flex-col'>
						<h1 className='text-3xl font-semibold'>
							{course.title}
						</h1>
						<p className='mt-3 text-[17px] text-neutral-600 dark:text-neutral-300'>
							{course.shortDescription}
						</p>
					</div>
					<div className='my-5 h-[0.5px] bg-border' />
					<div className='flex flex-col'>
						<h1 className='text-3xl font-semibold'>–û –∫—É—Ä—Å–µ</h1>
						<p className='mt-3 text-[17px] text-neutral-600 dark:text-neutral-300'>
							{course.fullDescription}
						</p>
					</div>
					{lessons.length > 0 && (
						<>
							<div className='my-5 h-[0.5px] bg-border' />
							<div className='flex flex-col'>
								<CourseLessons
									lessons={lessons}
									completedLessons={completedLessons ?? []}
								/>
							</div>
						</>
					)}
				</div>
				<div className='order-2 lg:col-span-2'>
					<div className='flex flex-col gap-4 lg:sticky lg:top-10'>
						<div className='relative flex flex-col gap-2 rounded-xl border border-blue-500 bg-blue-600 p-5'>
							{lessons.length === 0 ? (
								<>
									<h2 className='text-xl font-semibold text-white'>
										–ö—É—Ä—Å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!
									</h2>
									<p className='text-sm text-neutral-200'>
										–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤, –Ω–æ –≤—ã
										–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏
										–ø—Ä–∏–º–µ—Ä–∞–º–∏
									</p>
								</>
							) : completedLessons &&
							  completedLessons.length > 0 ? (
								(() => {
									const lastCompletedId =
										completedLessons[
											completedLessons.length - 1
										]
									const lastIndex = lessons.findIndex(
										lesson => lesson.id === lastCompletedId
									)
									const nextLesson =
										lessons[lastIndex + 1] || lessons[0]

									return (
										<>
											<h2 className='text-xl font-semibold text-white'>
												{lastIndex + 1 ===
												lessons.length
													? '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å üéâ'
													: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?'}
											</h2>
											<p className='text-sm text-neutral-200'>
												{lastIndex + 1 ===
												lessons.length
													? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞.'
													: '–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫—É—Ä—Å. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º.'}
											</p>
											<Button
												variant='secondary'
												className='mt-3 w-full'
												asChild
											>
												<Link
													href={ROUTES.lesson(
														nextLesson.slug
													)}
												>
													{lastIndex + 1 ===
													lessons.length
														? '–°–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å'
														: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
												</Link>
											</Button>
										</>
									)
								})()
							) : (
								<>
									<h2 className='text-xl font-semibold text-white'>
										–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?
									</h2>
									<p className='text-sm text-neutral-200'>
										–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —É—Ä–æ–∫–∏ –≤
										—É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º—É–º –æ—Ç
										–∫—É—Ä—Å–∞
									</p>
									<Button
										variant='secondary'
										className='mt-3 w-full'
										asChild
									>
										<Link
											href={ROUTES.lesson(
												lessons[0].slug
											)}
										>
											–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä
										</Link>
									</Button>
								</>
							)}
						</div>

						<div className='relative flex flex-col gap-3 rounded-xl border border-border bg-background p-5'>
							<h2 className='text-xl font-semibold text-foreground'>
								–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
							</h2>
							<p className='text-sm text-neutral-600 dark:text-neutral-300'>
								–°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥ –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∫—É—Ä—Å –Ω–∞
								YouTube
							</p>

							<div className='flex flex-col gap-4'>
								{course.attachment && (
									<Button
										variant='primary'
										className='w-full'
										asChild
									>
										<Link
											href={
												isAuthorized
													? getMediaSource(
															course.attachment,
															'attachments'
														)
													: ROUTES.login(
															ROUTES.course(
																course.slug
															)
														)
											}
											download={isAuthorized}
										>
											–°–∫–∞—á–∞—Ç—å –∫–æ–¥
										</Link>
									</Button>
								)}

								{course.youtubeUrl && (
									<Button
										variant='outline'
										className='w-full'
										asChild
									>
										<Link
											href={course.youtubeUrl}
											target='_blank'
										>
											–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube
										</Link>
									</Button>
								)}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	)
}
